Designing Perlbot Plugins
=========================

Table of Contents
-----------------

1) So you want to write a plugin
2) A very simple example plugin
3) Plugin requirements
  3.1) init
  3.2) behaviors
  3.3) hooks
    3.3.1) hook
    3.3.2) hook_regular_expression
    3.3.3) hook_addressed
    3.3.4) hook_advanced
    3.3.5) hook_admin
    3.3.6) hook_event
4) Config files
5) Cleanup
6) The plugin help facility

1) So you want to write a plugin
--------------------------------

This document is meant for people who want to design their own perlbot
plugin, or anyone who's just interested in how the plugin system works.

Here are the things you'll need:

- You obviously need to know perl.  In particular, you'll need a clear
  understanding of perl references and classes/objects.  The "perlref" and
  "perltoot" man pages have all you need to know.  You won't need to
  design any classes, but you'll need to deal with some objects.

2) A very simple example plugin
-------------------------------

package Perlbot::Plugin::Example;

use Perlbot::Plugin;
@ISA = qw(Perlbot::Plugin);

sub init {
  my $self = shift;

  $self->hook('example', \&example);
}

sub example {
  my $self = shift;
  my $user = shift;
  my $text = shift;

  $self->reply('I saw the command "example"!');
}

3) Plugin requirements
----------------------

  3.1) init
  ---------

All plugins should define an subroutine 'init' which is called when the
plugin is loaded.  Here you initialize your plugin, set up your behaviors
and hook appropriate events.

Example:

sub init {
  my $self = shift;

  $self->want_fork(0);

  $self->hook('hi', \&hi);
}

  3.2) behaviors
  --------------

You can define different behaviors for your plugin:

  $self->want_public(0|[1]);        # wants public text
  $self->want_msg(0|[1]);           # wants messages
  $self->want_action([0]|1);        # wants ctcp actions
  $self->want_chat([0]|1);          # wants dcc chat

  $self->want_fork(0|[1]);          # wants to be forked
  $self->want_reply_via_msg([0]|1); # wants to only reply via msg

Each of these wants either a 0 or a 1 as an argument.  The default values
are in brackets above.  If you don't want behavior different than the
default, you don't need to call these functions.

Example:

sub init {
  my $self = shift;

  $self->want_fork(0); # don't want to be forked
  $self->want_msg(0);  # don't want to get messages

  $self->hook('thing', \&someroutine);
}

  3.3) hooks
  ----------

Your plugin needs to hook diffent events to be of much use, so you'll
most likely need to use at least one of the following ways of hooking:

  $self->hook('command', \&callback);
  $self->hook_regular_expression('regular expression', \&callback);
  $self->hook_addressed(\&callback);
  $self->hook_advanced('command', \&callback);
  $self->hook_admin('command', \&callback);
  $self->hook_event('eventtype', \&callback);

    3.3.1) hook
    -----------

The hook function hooks a command word to a callback.  So, if your
commandprefix is set to '!' and you add the following hook:

  $self->hook('blah', \&blah);

When the bot sees '!blah some text here'.  It will call the callback
'blah' with a ref to $self, a user (if the person who said it was a
user) and the text 'some text here'. (it will strip the command)

    3.3.2) hook_regular_expression
    ------------------------------

The hook_regular_expression function will hook on a regular expression.
For instance, you could get yourself called on every line of text with
the following:

  $self->hook_regular_expression('.*', \&somesub);

You get passed the same type of stuff as the hook() call, but with
nothing stripped.

    3.3.3) hook_addressed
    ---------------------

This will hook any event in which the bot itself is address. If, for
instance, your bot was named 'samuelkins', then the following text
would trigger an event hooked in this manner:

  sameulkins, how are you?

You get called with the same arguments as hook, but with the addressed
part stripped, so you'd get 'how are you?'.

    3.3.4) hook_advanced
    --------------------

Exactly the same as hook, but you get the irc event passed as an
additional argument.

    3.3.5) hook_admin
    -----------------

The same as hook, but it will only be triggered by bot admins saying
the command.

    3.3.6) hook_admin
    -----------------

With this, you can hook any irc event you like.  To hook all messages:

  $self->hook_event('msg', \&something);

You just get passed a self ref and the event.


4) Config files
---------------

All plugins try to read a valid XML config file from their own directory.
An example config for a plugin is:

<config>
  <server hostname="www.someplace.com" port="9000" />
</config>

You can access elements from your config by using the Perlbot::Config
object:

  $self->config->value(server => 'hostname')

would return 'www.someplace.com'.


5) Cleanup
----------

When your plugin is shut down, Perlbot will try to call the method
'shutdown' on it.  You can define this method if you have anything you
want to clean up.


6) The plugin help facility
---------------------------

Help for plugins is defined by creating a file 'help.xml' in your plugin's
directory.  It should have the following format:

<help>
  <overview>An overview of the function of your plugin.</overview>
  <command name="something">What the command 'something' does.<br/>Usage</command>
  <command nome="someotherthing">What 'someotherthing' does.<br/>Usage<br/>More</command>
</help>

If you define this file, Perlbot will automatically give users acess to your
help.

