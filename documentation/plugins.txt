Perlbot Plugins
===============

Table of Contents
-----------------

1) Introduction and description of what a plugin is
2) Layout of plugin directory
3) Installing a plugin
4) Disabling a plugin
5) Dynamically loading a plugin


1) Introduction and description of what a plugin is
---------------------------------------------------

Everyone who runs an IRC bot has a different set of requirements.  There
will always be someone who feels that a given set of features is too much
or too little for their purposes.  This is why we decided to keep the core
perlbot functionality limited to a small set of things that nearly
*everyone* will want in a bot, and added a 'plugin' feature to accommodate
all the extras.

A plugin is a small package which adds some small bit of functionality to
your perlbot.  It is meant to easily 'plug in' to an existing perlbot
installation with little or no effort.  Here are some examples of what a
plugin could do:

- add an interface to pull the most recent headlines from a given news
  website
- add an interface to a web search engine or other form-based webpage
- allow IRC users to play interactive games with the bot, such as a trivia
  or quiz game
- add an interface to a specific unix utility or other program, such as
  ispell (spell checker) or bc (calculator)
- provide protection for channels, to prevent takeovers, flooding and
  other abuses



2) Layout of plugin directory
-----------------------------

All plugins reside in a subdirectory under your perlbot directory (we'll
refer to the perlbot directory as "perlbot/" here) called "Plugins".  You
can change this location if you want, by changing the bot.plugindir option
in the configuration file, but we'll always refer to it as "Plugins" here.
Under this directory, plugins are classified by type.  "Core" plugins are
the core bot functionality, you probably should leave these alone.  "Basic"
plugins are some basic services expected from IRC bots.  "Misc" contains
miscellaneous plugins.  Other directories may contain other types of
plugins.  Each plugin resides completely in its own directory under
"perlbot/Plugins/(something)/PluginName", and the directory is simply the
name of the plugin.  So if you had a plugin called "Foo", it would reside
in the directory "perlbot/Plugins/Misc/Foo", for example.



3) Installing and configuring a plugin
--------------------------------------

A plugin will come as a .tar.gz or possibly .zip archive.  To install it,
go to your Plugins/Misc/ directory and extract the archive (note: advanced
users who understand multiple plugindirs may use another location).  The
archive should expand into a directory which has the same name as the
plugin, as described above in Section 2. Read the README file in that
directory, if there is one.

If the README instructs you to modify your perlbot configuration file, make
the necessary modifications.  For example, configuration options for a
plugin called "PluginName" would be contained inside a section in your
configuration file that looks like this:

  <plugin name="PluginName">
    (settings go here)
  </plugin>

If a plugin's README describes a configuration option "foo", then you would
set "foo" to 10 by putting the line <foo>10</foo> in between the
<plugin></plugin> tags.

Now just start perlbot (if it's already running, make sure to stop it
first) and your shiny new plugin will be enabled.



4) Disabling a plugin
---------------------

To prevent perlbot from automatically loading a plugin when it starts, add a
line to the 'bot' section of your config file with the word 'noload' followed
by the name of the plugin that you wish to disable.  For example, if you want
to prevent the "Foo" plugin from being loaded, you would add the line
"<noload>Foo</noload>".  The plugin will not be immediately unloaded from your
perlbot, but it will not be loaded at the next startup.



5) Dynamically loading a plugin
-------------------------------

You can even tell a running perlbot to load a plugin that is currently not
loaded.  Simply message the bot:

  !loadplugin PluginName

If the plugin you loaded is one of the "noload" plugins (see section 4)
then it will still be prevented from loading the next time you start
perlbot.  If you want the plugin to automatically start up, you'll have to
remove the appropriate "noload" line from your config file.

In addition, you can use !unloadplugin and !reloadplugin to dynamically
unload or reload a plugin.  The !reloadplugin command is generally useful
to plugin developers, as is !reloadallplugins which reloads *all* plugins.
(See plugins-authoring.txt if you're interested in developing a plugin.)
